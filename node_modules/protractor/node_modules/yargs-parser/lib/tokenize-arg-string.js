// take an un-split argv string and tokenize it.
module.exports = function (argString) {
<<<<<<< HEAD
<<<<<<< HEAD
  if (Array.isArray(argString)) {
    return argString.map(e => typeof e !== 'string' ? e + '' : e)
  }

  argString = argString.trim()

  let i = 0
  let prevC = null
  let c = null
  let opening = null
  const args = []

  for (let ii = 0; ii < argString.length; ii++) {
=======
=======
>>>>>>> 76ef15d6e828f4d26e74e005b5af14d24e9c6bcd
  if (Array.isArray(argString)) return argString

  argString = argString.trim()

  var i = 0
  var prevC = null
  var c = null
  var opening = null
  var args = []

  for (var ii = 0; ii < argString.length; ii++) {
<<<<<<< HEAD
>>>>>>> 76ef15d6e828f4d26e74e005b5af14d24e9c6bcd
=======
>>>>>>> 76ef15d6e828f4d26e74e005b5af14d24e9c6bcd
    prevC = c
    c = argString.charAt(ii)

    // split on spaces unless we're in quotes.
    if (c === ' ' && !opening) {
      if (!(prevC === ' ')) {
        i++
      }
      continue
    }

    // don't split the string if we're in matching
    // opening or closing single and double quotes.
    if (c === opening) {
<<<<<<< HEAD
<<<<<<< HEAD
      opening = null
    } else if ((c === "'" || c === '"') && !opening) {
      opening = c
=======
=======
>>>>>>> 76ef15d6e828f4d26e74e005b5af14d24e9c6bcd
      if (!args[i]) args[i] = ''
      opening = null
      continue
    } else if ((c === "'" || c === '"') && !opening) {
      opening = c
      continue
<<<<<<< HEAD
>>>>>>> 76ef15d6e828f4d26e74e005b5af14d24e9c6bcd
=======
>>>>>>> 76ef15d6e828f4d26e74e005b5af14d24e9c6bcd
    }

    if (!args[i]) args[i] = ''
    args[i] += c
  }

  return args
}
