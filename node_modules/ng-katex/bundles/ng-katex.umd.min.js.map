{"version":3,"sources":["ng://ng-katex/lib/ng-katex.component.ts","ng://ng-katex/lib/ng-katex-paragraph.component.ts","ng://ng-katex/lib/ng-katex.service.ts","ng://ng-katex/lib/ng-katex.directive.ts","ng://ng-katex/lib/ng-katex-html.component.ts","ng://ng-katex/lib/ng-katex.module.ts"],"names":["KatexComponent","this","onError","EventEmitter","prototype","hasError","error","emit","Component","args","selector","template","Input","Output","KatexParagraphComponent","Object","defineProperty","extractMath","paragraph","changeDetection","ChangeDetectionStrategy","OnPush","KatexService","render","equation","element","options","katex.render","nativeElement","renderToString","katex.renderToString","Injectable","KatexDirective","el","katexService","ngOnChanges","e","Directive","ElementRef","KatexHtmlComponent","domSanitizer","_this","allHtml","segments","map","seg","math","raw","displayMode","type","value","reduce","total","current","bypassSecurityTrustHtml","html","DomSanitizer","KatexModule","NgModule","imports","CommonModule","providers","declarations","exports"],"mappings":"sfAAA,IAAAA,EAAA,WASA,SAAAA,IAaYC,KAAAC,QAAU,IAAIC,EAAAA,aAK1B,OAHEH,EAAAI,UAAAC,SAAA,SAASC,GACPL,KAAKC,QAAQK,KAAKD,wBAhBrBE,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,WACVC,SAAU,wKASTC,EAAAA,uBACAA,EAAAA,uBACAC,EAAAA,UAKHb,EA3BA,GCAA,IAAAc,EAAA,WAGA,SAAAA,KAsBA,OAHEC,OAAAC,eAAIF,EAAAV,UAAA,WAAQ,KAAZ,WACE,OAAOa,EAAAA,YAAYhB,KAAKiB,gEApB3BV,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,qBACVC,SAAU,kWAYVQ,gBAAiBC,EAAAA,wBAAwBC,8CAGxCT,EAAAA,SAKHE,EAzBA,GCAA,IAAAQ,EAAA,WAKA,SAAAA,KAUA,OAPEA,EAAAlB,UAAAmB,OAAA,SAAOC,EAAkBC,EAAqBC,GAC5C,OAAOC,EAAAA,OAAaH,EAAUC,EAAQG,cAAeF,IAGvDJ,EAAAlB,UAAAyB,eAAA,SAAeL,EAAkBE,GAC/B,OAAOI,EAAAA,eAAqBN,EAAUE,wBARzCK,EAAAA,aAUDT,EAfA,GCAAU,EAAA,WAoBE,SAAAA,EAAoBC,EACAC,GADAjC,KAAAgC,GAAAA,EACAhC,KAAAiC,aAAAA,EAHVjC,KAAAC,QAAU,IAAIC,EAAAA,aAa1B,OARE6B,EAAA5B,UAAA+B,YAAA,WACE,IACElC,KAAKiC,aAAaX,OAAOtB,KAAKuB,SAAUvB,KAAKgC,GAAIhC,KAAKyB,SACtD,MAAOU,GACPnC,KAAKC,QAAQK,KAAK6B,yBAjBvBC,EAAAA,UAAS5B,KAAA,CAAC,CACTC,SAAU,uDATV4B,EAAAA,kBAKOhB,uCAQNV,EAAAA,MAAKH,KAAA,CAAC,0BACNG,EAAAA,MAAKH,KAAA,CAAC,kCAENI,EAAAA,UAaHmB,EA/BA,GCAA,IAAAO,EAAA,WAWE,SAAAA,EAAoBC,EAAoCN,GAApCjC,KAAAuC,aAAAA,EAAoCvC,KAAAiC,aAAAA,EAqB1D,OAlBEnB,OAAAC,eAAIuB,EAAAnC,UAAA,UAAO,KAAX,WAAA,IAAAqC,EAAAxC,KAEMyC,EADWzC,KAAK0C,SACGC,KAAG,SAAEC,GAC1B,OAAIA,EAAIC,KACCL,EAAKP,aAAaL,eAAegB,EAAIE,IAAK,CAAEC,YAA0B,YAAbH,EAAII,OAG7DJ,EAAIK,SAEZC,QAAM,SAAEC,EAAOC,GAChB,OAAOD,EAASC,KAElB,OAAOpD,KAAKuC,aAAac,wBAAwBZ,oCAGnD3B,OAAAC,eAAIuB,EAAAnC,UAAA,WAAQ,KAAZ,WACE,OAAOa,EAAAA,YAAYhB,KAAKsD,2DAxB3B/C,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,gBACVC,SAAU,mFANH6C,EAAAA,oBACAlC,mCASNV,EAAAA,SAoBH2B,EAhCA,GCAA,IAAAkB,EAAA,WAQA,SAAAA,KAmB0B,2BAnBzBC,EAAAA,SAAQjD,KAAA,CAAC,CACRkD,QAAS,CACPC,EAAAA,cAEFC,UAAW,CACTvC,GAEFwC,aAAc,CACZ9B,EACAhC,EACAc,EACAyB,GAEFwB,QAAS,CACP/D,EACAc,EACAyB,OAGsBkB,EA3B1B","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport * as ko from './ng-katex.options';\n\n@Component({\n  selector: 'ng-katex',\n  template: `\n    <span [katex]=\"equation\"\n          [katex-options]=\"options\"\n          (someEvent)=\"hasError($event)\">\n    </span>\n  `,\n})\nexport class KatexComponent {\n\n  @Input() equation: string;\n  @Input() options?: ko.KatexOptions;\n  @Output() onError = new EventEmitter<any>();\n\n  hasError(error) {\n    this.onError.emit(error);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { extractMath, Segment } from 'extract-math';\n\n@Component({\n  selector: 'ng-katex-paragraph',\n  template: `\n    <p>\n      <ng-container *ngFor=\"let segment of segments\">\n        <ng-katex\n          *ngIf=\"segment.math else text\"\n          [equation]=\"segment.raw\"\n          [options]=\"{ displayMode: segment.type === 'display' }\">\n        </ng-katex>\n        <ng-template #text>{{ segment.value }}</ng-template>\n      </ng-container>\n    </p>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class KatexParagraphComponent {\n  @Input() paragraph: string;\n\n  get segments (): Segment[] {\n    return extractMath(this.paragraph);\n  }\n}\n","import { ElementRef, Injectable } from '@angular/core';\nimport * as ko from './ng-katex.options';\n\nimport * as katex from 'katex';\n\n@Injectable()\nexport class KatexService {\n\n  render(equation: string, element: ElementRef, options?: ko.KatexOptions) {\n    return katex.render(equation, element.nativeElement, options);\n  }\n\n  renderToString(equation: string, options?: ko.KatexOptions): string {\n    return katex.renderToString(equation, options);\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { KatexService } from './ng-katex.service';\nimport * as ko from './ng-katex.options';\n\n@Directive({\n  selector: '[katex]',\n})\nexport class KatexDirective {\n\n  @Input('katex') equation: string;\n  @Input('katex-options') options: ko.KatexOptions;\n\n  @Output() onError = new EventEmitter<any>();\n\n  constructor(private el: ElementRef,\n              private katexService: KatexService) {}\n\n  ngOnChanges() {\n    try {\n      this.katexService.render(this.equation, this.el, this.options);\n    } catch (e) {\n      this.onError.emit(e);\n    }\n  }\n\n}\n","import { Component, Input } from '@angular/core';\nimport { extractMath, Segment } from 'extract-math';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { KatexService } from './ng-katex.service';\n\n\n@Component({\n  selector: 'ng-katex-html',\n  template: `<span [innerHTML]=\"allHtml\"></span>`\n})\nexport class KatexHtmlComponent {\n  constructor(private domSanitizer: DomSanitizer, private katexService: KatexService) { }\n  @Input() html: string;\n\n  get allHtml(): SafeHtml {\n    let segments = this.segments;\n    var allHtml = segments.map((seg) => {\n      if (seg.math) {\n        return this.katexService.renderToString(seg.raw, { displayMode: seg.type === 'display' });\n      }\n      else {\n        return seg.value;\n      }\n    }).reduce((total, current) => {\n      return total += current;\n    });\n    return this.domSanitizer.bypassSecurityTrustHtml(allHtml);\n  }\n\n  get segments(): Segment[] {\n    return extractMath(this.html);\n  }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { KatexService } from './ng-katex.service';\nimport { KatexDirective } from './ng-katex.directive';\nimport { KatexComponent } from './ng-katex.component';\nimport { KatexParagraphComponent } from './ng-katex-paragraph.component';\nimport { KatexHtmlComponent } from './ng-katex-html.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  providers: [\n    KatexService,\n  ],\n  declarations: [\n    KatexDirective,\n    KatexComponent,\n    KatexParagraphComponent,\n    KatexHtmlComponent\n  ],\n  exports: [\n    KatexComponent,\n    KatexParagraphComponent,\n    KatexHtmlComponent\n  ],\n})\nexport class KatexModule {}\n"]}