/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Input, Output, } from '@angular/core';
import { KatexService } from './ng-katex.service';
import * as ko from './ng-katex.options';
var KatexDirective = /** @class */ (function () {
    function KatexDirective(el, katexService) {
        this.el = el;
        this.katexService = katexService;
        this.onError = new EventEmitter();
    }
    /**
     * @return {?}
     */
    KatexDirective.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        try {
            this.katexService.render(this.equation, this.el, this.options);
        }
        catch (e) {
            this.onError.emit(e);
        }
    };
    KatexDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[katex]',
                },] }
    ];
    /** @nocollapse */
    KatexDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: KatexService }
    ]; };
    KatexDirective.propDecorators = {
        equation: [{ type: Input, args: ['katex',] }],
        options: [{ type: Input, args: ['katex-options',] }],
        onError: [{ type: Output }]
    };
    return KatexDirective;
}());
export { KatexDirective };
if (false) {
    /** @type {?} */
    KatexDirective.prototype.equation;
    /** @type {?} */
    KatexDirective.prototype.options;
    /** @type {?} */
    KatexDirective.prototype.onError;
    /**
     * @type {?}
     * @private
     */
    KatexDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    KatexDirective.prototype.katexService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcta2F0ZXguZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmcta2F0ZXgvIiwic291cmNlcyI6WyJsaWIvbmcta2F0ZXguZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbEQsT0FBTyxLQUFLLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUV6QztJQVVFLHdCQUFvQixFQUFjLEVBQ2QsWUFBMEI7UUFEMUIsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUNkLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBSHBDLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO0lBR0ssQ0FBQzs7OztJQUVsRCxvQ0FBVzs7O0lBQVg7UUFDRSxJQUFJO1lBQ0YsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNoRTtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdEI7SUFDSCxDQUFDOztnQkFuQkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxTQUFTO2lCQUNwQjs7OztnQkFWQyxVQUFVO2dCQUtILFlBQVk7OzsyQkFRbEIsS0FBSyxTQUFDLE9BQU87MEJBQ2IsS0FBSyxTQUFDLGVBQWU7MEJBRXJCLE1BQU07O0lBYVQscUJBQUM7Q0FBQSxBQXJCRCxJQXFCQztTQWxCWSxjQUFjOzs7SUFFekIsa0NBQWlDOztJQUNqQyxpQ0FBaUQ7O0lBRWpELGlDQUE0Qzs7Ozs7SUFFaEMsNEJBQXNCOzs7OztJQUN0QixzQ0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE91dHB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBLYXRleFNlcnZpY2UgfSBmcm9tICcuL25nLWthdGV4LnNlcnZpY2UnO1xuaW1wb3J0ICogYXMga28gZnJvbSAnLi9uZy1rYXRleC5vcHRpb25zJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2thdGV4XScsXG59KVxuZXhwb3J0IGNsYXNzIEthdGV4RGlyZWN0aXZlIHtcblxuICBASW5wdXQoJ2thdGV4JykgZXF1YXRpb246IHN0cmluZztcbiAgQElucHV0KCdrYXRleC1vcHRpb25zJykgb3B0aW9uczoga28uS2F0ZXhPcHRpb25zO1xuXG4gIEBPdXRwdXQoKSBvbkVycm9yID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgcHJpdmF0ZSBrYXRleFNlcnZpY2U6IEthdGV4U2VydmljZSkge31cblxuICBuZ09uQ2hhbmdlcygpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5rYXRleFNlcnZpY2UucmVuZGVyKHRoaXMuZXF1YXRpb24sIHRoaXMuZWwsIHRoaXMub3B0aW9ucyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhpcy5vbkVycm9yLmVtaXQoZSk7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==