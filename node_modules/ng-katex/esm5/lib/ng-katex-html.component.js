/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { extractMath } from 'extract-math';
import { DomSanitizer } from '@angular/platform-browser';
import { KatexService } from './ng-katex.service';
var KatexHtmlComponent = /** @class */ (function () {
    function KatexHtmlComponent(domSanitizer, katexService) {
        this.domSanitizer = domSanitizer;
        this.katexService = katexService;
    }
    Object.defineProperty(KatexHtmlComponent.prototype, "allHtml", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var segments = this.segments;
            /** @type {?} */
            var allHtml = segments.map((/**
             * @param {?} seg
             * @return {?}
             */
            function (seg) {
                if (seg.math) {
                    return _this.katexService.renderToString(seg.raw, { displayMode: seg.type === 'display' });
                }
                else {
                    return seg.value;
                }
            })).reduce((/**
             * @param {?} total
             * @param {?} current
             * @return {?}
             */
            function (total, current) {
                return total += current;
            }));
            return this.domSanitizer.bypassSecurityTrustHtml(allHtml);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KatexHtmlComponent.prototype, "segments", {
        get: /**
         * @return {?}
         */
        function () {
            return extractMath(this.html);
        },
        enumerable: true,
        configurable: true
    });
    KatexHtmlComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-katex-html',
                    template: "<span [innerHTML]=\"allHtml\"></span>"
                }] }
    ];
    /** @nocollapse */
    KatexHtmlComponent.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: KatexService }
    ]; };
    KatexHtmlComponent.propDecorators = {
        html: [{ type: Input }]
    };
    return KatexHtmlComponent;
}());
export { KatexHtmlComponent };
if (false) {
    /** @type {?} */
    KatexHtmlComponent.prototype.html;
    /**
     * @type {?}
     * @private
     */
    KatexHtmlComponent.prototype.domSanitizer;
    /**
     * @type {?}
     * @private
     */
    KatexHtmlComponent.prototype.katexService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcta2F0ZXgtaHRtbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1rYXRleC8iLCJzb3VyY2VzIjpbImxpYi9uZy1rYXRleC1odG1sLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFFLFdBQVcsRUFBVyxNQUFNLGNBQWMsQ0FBQztBQUNwRCxPQUFPLEVBQUUsWUFBWSxFQUFZLE1BQU0sMkJBQTJCLENBQUM7QUFDbkUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBR2xEO0lBS0UsNEJBQW9CLFlBQTBCLEVBQVUsWUFBMEI7UUFBOUQsaUJBQVksR0FBWixZQUFZLENBQWM7UUFBVSxpQkFBWSxHQUFaLFlBQVksQ0FBYztJQUFJLENBQUM7SUFHdkYsc0JBQUksdUNBQU87Ozs7UUFBWDtZQUFBLGlCQWFDOztnQkFaSyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVE7O2dCQUN4QixPQUFPLEdBQUcsUUFBUSxDQUFDLEdBQUc7Ozs7WUFBQyxVQUFDLEdBQUc7Z0JBQzdCLElBQUksR0FBRyxDQUFDLElBQUksRUFBRTtvQkFDWixPQUFPLEtBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUUsQ0FBQyxDQUFDO2lCQUMzRjtxQkFDSTtvQkFDSCxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUM7aUJBQ2xCO1lBQ0gsQ0FBQyxFQUFDLENBQUMsTUFBTTs7Ozs7WUFBQyxVQUFDLEtBQUssRUFBRSxPQUFPO2dCQUN2QixPQUFPLEtBQUssSUFBSSxPQUFPLENBQUM7WUFDMUIsQ0FBQyxFQUFDO1lBQ0YsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVELENBQUM7OztPQUFBO0lBRUQsc0JBQUksd0NBQVE7Ozs7UUFBWjtZQUNFLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoQyxDQUFDOzs7T0FBQTs7Z0JBekJGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsUUFBUSxFQUFFLHVDQUFxQztpQkFDaEQ7Ozs7Z0JBUFEsWUFBWTtnQkFDWixZQUFZOzs7dUJBU2xCLEtBQUs7O0lBb0JSLHlCQUFDO0NBQUEsQUExQkQsSUEwQkM7U0F0Qlksa0JBQWtCOzs7SUFFN0Isa0NBQXNCOzs7OztJQURWLDBDQUFrQzs7Ozs7SUFBRSwwQ0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBleHRyYWN0TWF0aCwgU2VnbWVudCB9IGZyb20gJ2V4dHJhY3QtbWF0aCc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVIdG1sIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBLYXRleFNlcnZpY2UgfSBmcm9tICcuL25nLWthdGV4LnNlcnZpY2UnO1xuXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25nLWthdGV4LWh0bWwnLFxuICB0ZW1wbGF0ZTogYDxzcGFuIFtpbm5lckhUTUxdPVwiYWxsSHRtbFwiPjwvc3Bhbj5gXG59KVxuZXhwb3J0IGNsYXNzIEthdGV4SHRtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZG9tU2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsIHByaXZhdGUga2F0ZXhTZXJ2aWNlOiBLYXRleFNlcnZpY2UpIHsgfVxuICBASW5wdXQoKSBodG1sOiBzdHJpbmc7XG5cbiAgZ2V0IGFsbEh0bWwoKTogU2FmZUh0bWwge1xuICAgIGxldCBzZWdtZW50cyA9IHRoaXMuc2VnbWVudHM7XG4gICAgdmFyIGFsbEh0bWwgPSBzZWdtZW50cy5tYXAoKHNlZykgPT4ge1xuICAgICAgaWYgKHNlZy5tYXRoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmthdGV4U2VydmljZS5yZW5kZXJUb1N0cmluZyhzZWcucmF3LCB7IGRpc3BsYXlNb2RlOiBzZWcudHlwZSA9PT0gJ2Rpc3BsYXknIH0pO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBzZWcudmFsdWU7XG4gICAgICB9XG4gICAgfSkucmVkdWNlKCh0b3RhbCwgY3VycmVudCkgPT4ge1xuICAgICAgcmV0dXJuIHRvdGFsICs9IGN1cnJlbnQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuZG9tU2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RIdG1sKGFsbEh0bWwpO1xuICB9XG5cbiAgZ2V0IHNlZ21lbnRzKCk6IFNlZ21lbnRbXSB7XG4gICAgcmV0dXJuIGV4dHJhY3RNYXRoKHRoaXMuaHRtbCk7XG4gIH1cbn0iXX0=