/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Input, Output, } from '@angular/core';
import { KatexService } from './ng-katex.service';
import * as ko from './ng-katex.options';
export class KatexDirective {
    /**
     * @param {?} el
     * @param {?} katexService
     */
    constructor(el, katexService) {
        this.el = el;
        this.katexService = katexService;
        this.onError = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        try {
            this.katexService.render(this.equation, this.el, this.options);
        }
        catch (e) {
            this.onError.emit(e);
        }
    }
}
KatexDirective.decorators = [
    { type: Directive, args: [{
                selector: '[katex]',
            },] }
];
/** @nocollapse */
KatexDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: KatexService }
];
KatexDirective.propDecorators = {
    equation: [{ type: Input, args: ['katex',] }],
    options: [{ type: Input, args: ['katex-options',] }],
    onError: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    KatexDirective.prototype.equation;
    /** @type {?} */
    KatexDirective.prototype.options;
    /** @type {?} */
    KatexDirective.prototype.onError;
    /**
     * @type {?}
     * @private
     */
    KatexDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    KatexDirective.prototype.katexService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcta2F0ZXguZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmcta2F0ZXgvIiwic291cmNlcyI6WyJsaWIvbmcta2F0ZXguZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbEQsT0FBTyxLQUFLLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUt6QyxNQUFNLE9BQU8sY0FBYzs7Ozs7SUFPekIsWUFBb0IsRUFBYyxFQUNkLFlBQTBCO1FBRDFCLE9BQUUsR0FBRixFQUFFLENBQVk7UUFDZCxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUhwQyxZQUFPLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQUdLLENBQUM7Ozs7SUFFbEQsV0FBVztRQUNULElBQUk7WUFDRixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2hFO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN0QjtJQUNILENBQUM7OztZQW5CRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFNBQVM7YUFDcEI7Ozs7WUFWQyxVQUFVO1lBS0gsWUFBWTs7O3VCQVFsQixLQUFLLFNBQUMsT0FBTztzQkFDYixLQUFLLFNBQUMsZUFBZTtzQkFFckIsTUFBTTs7OztJQUhQLGtDQUFpQzs7SUFDakMsaUNBQWlEOztJQUVqRCxpQ0FBNEM7Ozs7O0lBRWhDLDRCQUFzQjs7Ozs7SUFDdEIsc0NBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPdXRwdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgS2F0ZXhTZXJ2aWNlIH0gZnJvbSAnLi9uZy1rYXRleC5zZXJ2aWNlJztcbmltcG9ydCAqIGFzIGtvIGZyb20gJy4vbmcta2F0ZXgub3B0aW9ucyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1trYXRleF0nLFxufSlcbmV4cG9ydCBjbGFzcyBLYXRleERpcmVjdGl2ZSB7XG5cbiAgQElucHV0KCdrYXRleCcpIGVxdWF0aW9uOiBzdHJpbmc7XG4gIEBJbnB1dCgna2F0ZXgtb3B0aW9ucycpIG9wdGlvbnM6IGtvLkthdGV4T3B0aW9ucztcblxuICBAT3V0cHV0KCkgb25FcnJvciA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgIHByaXZhdGUga2F0ZXhTZXJ2aWNlOiBLYXRleFNlcnZpY2UpIHt9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMua2F0ZXhTZXJ2aWNlLnJlbmRlcih0aGlzLmVxdWF0aW9uLCB0aGlzLmVsLCB0aGlzLm9wdGlvbnMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMub25FcnJvci5lbWl0KGUpO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=