/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { extractMath } from 'extract-math';
import { DomSanitizer } from '@angular/platform-browser';
import { KatexService } from './ng-katex.service';
export class KatexHtmlComponent {
    /**
     * @param {?} domSanitizer
     * @param {?} katexService
     */
    constructor(domSanitizer, katexService) {
        this.domSanitizer = domSanitizer;
        this.katexService = katexService;
    }
    /**
     * @return {?}
     */
    get allHtml() {
        /** @type {?} */
        let segments = this.segments;
        /** @type {?} */
        var allHtml = segments.map((/**
         * @param {?} seg
         * @return {?}
         */
        (seg) => {
            if (seg.math) {
                return this.katexService.renderToString(seg.raw, { displayMode: seg.type === 'display' });
            }
            else {
                return seg.value;
            }
        })).reduce((/**
         * @param {?} total
         * @param {?} current
         * @return {?}
         */
        (total, current) => {
            return total += current;
        }));
        return this.domSanitizer.bypassSecurityTrustHtml(allHtml);
    }
    /**
     * @return {?}
     */
    get segments() {
        return extractMath(this.html);
    }
}
KatexHtmlComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-katex-html',
                template: `<span [innerHTML]="allHtml"></span>`
            }] }
];
/** @nocollapse */
KatexHtmlComponent.ctorParameters = () => [
    { type: DomSanitizer },
    { type: KatexService }
];
KatexHtmlComponent.propDecorators = {
    html: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    KatexHtmlComponent.prototype.html;
    /**
     * @type {?}
     * @private
     */
    KatexHtmlComponent.prototype.domSanitizer;
    /**
     * @type {?}
     * @private
     */
    KatexHtmlComponent.prototype.katexService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcta2F0ZXgtaHRtbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1rYXRleC8iLCJzb3VyY2VzIjpbImxpYi9uZy1rYXRleC1odG1sLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFFLFdBQVcsRUFBVyxNQUFNLGNBQWMsQ0FBQztBQUNwRCxPQUFPLEVBQUUsWUFBWSxFQUFZLE1BQU0sMkJBQTJCLENBQUM7QUFDbkUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBT2xELE1BQU0sT0FBTyxrQkFBa0I7Ozs7O0lBQzdCLFlBQW9CLFlBQTBCLEVBQVUsWUFBMEI7UUFBOUQsaUJBQVksR0FBWixZQUFZLENBQWM7UUFBVSxpQkFBWSxHQUFaLFlBQVksQ0FBYztJQUFJLENBQUM7Ozs7SUFHdkYsSUFBSSxPQUFPOztZQUNMLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUTs7WUFDeEIsT0FBTyxHQUFHLFFBQVEsQ0FBQyxHQUFHOzs7O1FBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUNqQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQUU7Z0JBQ1osT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFLENBQUMsQ0FBQzthQUMzRjtpQkFDSTtnQkFDSCxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUM7YUFDbEI7UUFDSCxDQUFDLEVBQUMsQ0FBQyxNQUFNOzs7OztRQUFDLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFO1lBQzNCLE9BQU8sS0FBSyxJQUFJLE9BQU8sQ0FBQztRQUMxQixDQUFDLEVBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsdUJBQXVCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDNUQsQ0FBQzs7OztJQUVELElBQUksUUFBUTtRQUNWLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7WUF6QkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2dCQUN6QixRQUFRLEVBQUUscUNBQXFDO2FBQ2hEOzs7O1lBUFEsWUFBWTtZQUNaLFlBQVk7OzttQkFTbEIsS0FBSzs7OztJQUFOLGtDQUFzQjs7Ozs7SUFEViwwQ0FBa0M7Ozs7O0lBQUUsMENBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZXh0cmFjdE1hdGgsIFNlZ21lbnQgfSBmcm9tICdleHRyYWN0LW1hdGgnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlSHRtbCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgS2F0ZXhTZXJ2aWNlIH0gZnJvbSAnLi9uZy1rYXRleC5zZXJ2aWNlJztcblxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZy1rYXRleC1odG1sJyxcbiAgdGVtcGxhdGU6IGA8c3BhbiBbaW5uZXJIVE1MXT1cImFsbEh0bWxcIj48L3NwYW4+YFxufSlcbmV4cG9ydCBjbGFzcyBLYXRleEh0bWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyLCBwcml2YXRlIGthdGV4U2VydmljZTogS2F0ZXhTZXJ2aWNlKSB7IH1cbiAgQElucHV0KCkgaHRtbDogc3RyaW5nO1xuXG4gIGdldCBhbGxIdG1sKCk6IFNhZmVIdG1sIHtcbiAgICBsZXQgc2VnbWVudHMgPSB0aGlzLnNlZ21lbnRzO1xuICAgIHZhciBhbGxIdG1sID0gc2VnbWVudHMubWFwKChzZWcpID0+IHtcbiAgICAgIGlmIChzZWcubWF0aCkge1xuICAgICAgICByZXR1cm4gdGhpcy5rYXRleFNlcnZpY2UucmVuZGVyVG9TdHJpbmcoc2VnLnJhdywgeyBkaXNwbGF5TW9kZTogc2VnLnR5cGUgPT09ICdkaXNwbGF5JyB9KTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gc2VnLnZhbHVlO1xuICAgICAgfVxuICAgIH0pLnJlZHVjZSgodG90YWwsIGN1cnJlbnQpID0+IHtcbiAgICAgIHJldHVybiB0b3RhbCArPSBjdXJyZW50O1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmRvbVNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbChhbGxIdG1sKTtcbiAgfVxuXG4gIGdldCBzZWdtZW50cygpOiBTZWdtZW50W10ge1xuICAgIHJldHVybiBleHRyYWN0TWF0aCh0aGlzLmh0bWwpO1xuICB9XG59Il19