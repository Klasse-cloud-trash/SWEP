import { EventEmitter, Component, Input, Output, ChangeDetectionStrategy, Injectable, Directive, ElementRef, NgModule } from '@angular/core';
import { extractMath } from 'extract-math';
import { CommonModule } from '@angular/common';
import { render, renderToString } from 'katex';
import { DomSanitizer } from '@angular/platform-browser';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var KatexComponent = /** @class */ (function () {
    function KatexComponent() {
        this.onError = new EventEmitter();
    }
    /**
     * @param {?} error
     * @return {?}
     */
    KatexComponent.prototype.hasError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.onError.emit(error);
    };
    KatexComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-katex',
                    template: "\n    <span [katex]=\"equation\"\n          [katex-options]=\"options\"\n          (someEvent)=\"hasError($event)\">\n    </span>\n  "
                }] }
    ];
    KatexComponent.propDecorators = {
        equation: [{ type: Input }],
        options: [{ type: Input }],
        onError: [{ type: Output }]
    };
    return KatexComponent;
}());
if (false) {
    /** @type {?} */
    KatexComponent.prototype.equation;
    /** @type {?} */
    KatexComponent.prototype.options;
    /** @type {?} */
    KatexComponent.prototype.onError;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var KatexParagraphComponent = /** @class */ (function () {
    function KatexParagraphComponent() {
    }
    Object.defineProperty(KatexParagraphComponent.prototype, "segments", {
        get: /**
         * @return {?}
         */
        function () {
            return extractMath(this.paragraph);
        },
        enumerable: true,
        configurable: true
    });
    KatexParagraphComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-katex-paragraph',
                    template: "\n    <p>\n      <ng-container *ngFor=\"let segment of segments\">\n        <ng-katex\n          *ngIf=\"segment.math else text\"\n          [equation]=\"segment.raw\"\n          [options]=\"{ displayMode: segment.type === 'display' }\">\n        </ng-katex>\n        <ng-template #text>{{ segment.value }}</ng-template>\n      </ng-container>\n    </p>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    KatexParagraphComponent.propDecorators = {
        paragraph: [{ type: Input }]
    };
    return KatexParagraphComponent;
}());
if (false) {
    /** @type {?} */
    KatexParagraphComponent.prototype.paragraph;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var KatexService = /** @class */ (function () {
    function KatexService() {
    }
    /**
     * @param {?} equation
     * @param {?} element
     * @param {?=} options
     * @return {?}
     */
    KatexService.prototype.render = /**
     * @param {?} equation
     * @param {?} element
     * @param {?=} options
     * @return {?}
     */
    function (equation, element, options) {
        return render(equation, element.nativeElement, options);
    };
    /**
     * @param {?} equation
     * @param {?=} options
     * @return {?}
     */
    KatexService.prototype.renderToString = /**
     * @param {?} equation
     * @param {?=} options
     * @return {?}
     */
    function (equation, options) {
        return renderToString(equation, options);
    };
    KatexService.decorators = [
        { type: Injectable }
    ];
    return KatexService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var KatexDirective = /** @class */ (function () {
    function KatexDirective(el, katexService) {
        this.el = el;
        this.katexService = katexService;
        this.onError = new EventEmitter();
    }
    /**
     * @return {?}
     */
    KatexDirective.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        try {
            this.katexService.render(this.equation, this.el, this.options);
        }
        catch (e) {
            this.onError.emit(e);
        }
    };
    KatexDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[katex]',
                },] }
    ];
    /** @nocollapse */
    KatexDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: KatexService }
    ]; };
    KatexDirective.propDecorators = {
        equation: [{ type: Input, args: ['katex',] }],
        options: [{ type: Input, args: ['katex-options',] }],
        onError: [{ type: Output }]
    };
    return KatexDirective;
}());
if (false) {
    /** @type {?} */
    KatexDirective.prototype.equation;
    /** @type {?} */
    KatexDirective.prototype.options;
    /** @type {?} */
    KatexDirective.prototype.onError;
    /**
     * @type {?}
     * @private
     */
    KatexDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    KatexDirective.prototype.katexService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var KatexHtmlComponent = /** @class */ (function () {
    function KatexHtmlComponent(domSanitizer, katexService) {
        this.domSanitizer = domSanitizer;
        this.katexService = katexService;
    }
    Object.defineProperty(KatexHtmlComponent.prototype, "allHtml", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var segments = this.segments;
            /** @type {?} */
            var allHtml = segments.map((/**
             * @param {?} seg
             * @return {?}
             */
            function (seg) {
                if (seg.math) {
                    return _this.katexService.renderToString(seg.raw, { displayMode: seg.type === 'display' });
                }
                else {
                    return seg.value;
                }
            })).reduce((/**
             * @param {?} total
             * @param {?} current
             * @return {?}
             */
            function (total, current) {
                return total += current;
            }));
            return this.domSanitizer.bypassSecurityTrustHtml(allHtml);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KatexHtmlComponent.prototype, "segments", {
        get: /**
         * @return {?}
         */
        function () {
            return extractMath(this.html);
        },
        enumerable: true,
        configurable: true
    });
    KatexHtmlComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-katex-html',
                    template: "<span [innerHTML]=\"allHtml\"></span>"
                }] }
    ];
    /** @nocollapse */
    KatexHtmlComponent.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: KatexService }
    ]; };
    KatexHtmlComponent.propDecorators = {
        html: [{ type: Input }]
    };
    return KatexHtmlComponent;
}());
if (false) {
    /** @type {?} */
    KatexHtmlComponent.prototype.html;
    /**
     * @type {?}
     * @private
     */
    KatexHtmlComponent.prototype.domSanitizer;
    /**
     * @type {?}
     * @private
     */
    KatexHtmlComponent.prototype.katexService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var KatexModule = /** @class */ (function () {
    function KatexModule() {
    }
    KatexModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                    ],
                    providers: [
                        KatexService,
                    ],
                    declarations: [
                        KatexDirective,
                        KatexComponent,
                        KatexParagraphComponent,
                        KatexHtmlComponent
                    ],
                    exports: [
                        KatexComponent,
                        KatexParagraphComponent,
                        KatexHtmlComponent
                    ],
                },] }
    ];
    return KatexModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { KatexComponent, KatexModule, KatexParagraphComponent, KatexService as ɵa, KatexDirective as ɵb, KatexHtmlComponent as ɵc };
//# sourceMappingURL=ng-katex.js.map
